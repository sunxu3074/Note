

原文链接:http://blog.csdn.net/singwhatiwanna/article/details/49560409

初级工程师

小明之前完全没接触过Android开发，是个应届生，他的待遇是13k，然后小明以校招的身份进入了百度，然后小明需要怎么学习才能成为初级工程师呢？这个时候，小明对编程基础、数据结构、C语言都有一定基础，Java语法什么的也都掌握的比较好，Android才有java语言，无奈的是小明并不会搞Android。

小明首先需要购买一本Android入门的书籍，为了更快地学习Android，小明业余时间也都用来一边看书一边照着书中的例子敲代码，结果2周时间小明就把这本书学了一遍。看完这本书后，小明对Android的历史、结构、代码规范等都有了一个大概的了解，并且，小明已经可以写出一些简单的Activity了。这个时候在小明眼里，Android开发很简单很好玩，通过在xml中摆放一些按钮文本框什么的就可以做一些界面了。

小明开始跟着他的技术导师做需求，一些简单的小需求小明自然是不在话下了。突然有一天来了一个需求，该需求要求小明在Activity中为一个button加一个动画效果，小明慌了：“完全没接触过，书上也没有讲，怎么办呢？”小明冷静了下，打开了百度搜索，输入“Android 动画”，打开前几个链接，小明恍然大悟，照着网上的例子把需求给实现了。后来导师告诉他：“学好Android，官方文档是必须看的，既全面又权威”。然后小明如获至宝，花了一年时间把上面的guide和training都看了一遍，并且他还动手抄了几个小例子。

有一天，小明又需要做一个动画相关的需求，这可难不倒小明，它熟练地打开了www.baidu.com，输入“Android 动画”，突然他楞了一下：”总不能每次写动画都要百度一下吧！“，于是他在CSDN开了一个博客，把动画相关的知识点都写上去，为的是后面再写动画相关的代码就不用百度去搜了，事实如何呢？后面再写动画相关的代码，小明的确不用再去百度搜了，因为通过写一篇动画博客，他把动画相关的细节都已经记住了，这样他就可以不用再去参考任何文档了，后来小明还学会了把一些琐碎的不方便放在博客上的东西写到了印象笔记上面，什么时候忘了10秒钟以内都可以快速找回来，而不是花10分钟去再次搜索一遍。

这里总结一下，Android入门的时候，需要有一本入门书，好好学习书中的内容，同时花一年时间把Android官方文档中的training和guide看一遍，同时通过写博客和记笔记的方式来做总结，建议让自己的每篇博客都有价值些。通过一年时间的学习，相信每个人都可以达到中级工程师的水平。

技术要求： 
- 基本知识点 
比如四大组件如何使用、如何创建Service、如何进行布局、简单的自定义View、动画等常见技术 
- 书籍推荐 
《第一行代码 Android》、《疯狂Android》

中级工程师

小明经过一年的努力学习终于成为Android中级工程师了，月薪变成了17k。到了中级工程师，已经可以在公司里干很多体力活了，但是一些很重要的任务小明还不能一个人承担起来，这个时候小明需要学习的内容就很多了，如下所示： 
- AIDL：熟悉AIDL，理解其工作原理，懂transact和onTransact的区别； 
- Binder：从Java层大概理解Binder的工作原理，懂Parcel对象的使用； 
- 多进程：熟练掌握多进程的运行机制，懂Messenger、Socket等； 
- 事件分发：弹性滑动、滑动冲突等； 
- 玩转View：View的绘制原理、各种自定义View； 
- 动画系列：熟悉View动画和属性动画的不同点，懂属性动画的工作原理； 
- 懂性能优化、熟悉mat等工具 
- 懂点常见的设计模式

学习方法

阅读进阶书籍，阅读Android源码，阅读官方文档并尝试自己写相关的技术文章，需要有一定技术深度和自我思考。在这个阶段的学习过程中，有2个点是比较困扰大家的，一个是阅读源码，另一个是自定义View以及滑动冲突。

如何阅读源码呢？这是个头疼的问题，但是源码必须要读。阅读源码的时候不要深入代码细节不可自拔，要关注代码的流程并尽量挖掘出对应用层开发有用的结论。另外仔细阅读源码中对一个类或者方法的注释，在看不懂源码时，源码中的注释可以帮你更好地了解源码中的工作原理，这个过程虽然艰苦，但是别无他法。

如何玩转自定义View呢？我的建议是不要通过学习自定义view而学习自定义view。为什么这么说呢？因为自定义view的种类太多了，各式各样的绚丽的自定义效果，如何学的玩呢！我们要透过现象看本质，更多地去关注自定义view所需的知识点，这里做如下总结： 
- 搞懂view的滑动原理 
- 搞懂如何实现弹性滑动 
- 搞懂view的滑动冲突 
- 搞懂view的measure、layout和draw 
- 然后再学习几个已有的自定义view的例子 
- 最后就可以搞定自定义view了，所谓万变不离其宗

大概再需要1-2年时间，即可达到高级工程师的技术水平。我个人认为通过《Android开发艺术探索》和《Android群英传》可以缩短这个过程为0.5-1年。注意，达到高级工程师的技术水平不代表就可以立刻成为高级工程师（受机遇、是否跳槽的影响），但是技术达到了，成为高级工程师只是很简单的事。

技术要求： 
- 稍微深入的知识点 
AIDL、Messenger、Binder、多进程、动画、滑动冲突、自定义View、消息队列等 
- 书籍推荐 
《Android开发艺术探索》、《Android群英传》

高级工程师

小明成为了梦寐以求的高级工程师，月薪达到了20k，还拿到了一丢丢股票。这个时候小明的Android水平已经不错了，但是小明的目标是资深工程师，小明听说资深工程师月薪可以达到30k+。

为了成为Android资深工程师，需要学习的东西就更多了，并且有些并不是那么具体了，如下所示： 
- 继续加深理解”稍微深入的知识点“中所定义的内容 
- 了解系统核心机制： 
1. 了解SystemServer的启动过程 
2. 了解主线程的消息循环模型 
3. 了解AMS和PMS的工作原理 
4. 能够回答问题”一个应用存在多少个Window？“ 
5. 了解四大组件的大概工作流程 
6. … 
- 基本知识点的细节 
1. Activity的启动模式以及异常情况下不同Activity的表现 
2. Service的onBind和onReBind的关联 
3. onServiceDisconnected(ComponentName className)和binderDied()的区别 
4. AsyncTask在不同版本上的表现细节 
5. 线程池的细节和参数配置 
6. … 
- 熟悉设计模式，有架构意识

学习方法

这个时候已经没有太具体的学习方法了，无非就是看书、看源码和做项目，平时多种总结，尽量将知识融会贯通从而形成一种体系化的感觉。同时这个阶段对架构是有一定要求的，架构是抽象的，但是设计模式是具体的，所以一定要加强下设计模式的学习。关于设计模式的学习，最近一本新书推荐给大家《Android 源码设计模式解析与实战》，既可以学习设计模式，又可能体会到Android源码中的设计思想，我最近也在阅读此书。

技术要求： 
- 稍微深入的知识点 
- 系统核心机制 
- 基本知识点的细节 
- 设计模式和架构 
- 书籍推荐 
《Android开发艺术探索》、《Android 源码设计模式解析与实战》、《Android内核剖析》

资深工程师

这个阶段的程序员也许并没有太具体的学习路线了。



给Android程序员的一些面试建议

原文链接:http://blog.csdn.net/singwhatiwanna/article/details/49230997
什么是合适的候选者

在介绍如何面试之前，这里先从公司的角度来分析：”到底什么样的候选者是公司所需要的技术人才？“就我在百度的一些面试官经验来说，一个具有如下特征的Android程序员是我们所需要的： 
1. 具有本科及以上学历（名校更好） 
2. 具有2年及以上的工作经验（名企更好） 
3. 技术扎实，有技术追求和工作激情 
4. 良好的沟通和协作

在上面的四条中，其中第3条是最为重要的，即技术，在百度技术是大家所推崇的，因此技术是决定能否通过面试的最重要最直接的原因。一般来说，越是大公司，其对技术的要求就越高，尽管部分岗位并不需要那么好的技术，但是为了对候选者做出区分，其面试过程仍然会面试一些稍微深入的话题，相信大家都有所体会。

除了技术以外，良好的沟通和协作能力也是比较重要的。也许很多人觉得这个比较抽象，心里会想：”你怎么知道我有没有良好的沟通和协作能力呢“？其实这个问题并不难，面试过程就是一次沟通过程，如果不能和面试官很好地沟通，这就说明候选者的沟通有问题。如何很好地和面试官沟通呢？给如下几点建议： 
- 礼貌和尊重。 
- 听懂面试官的问题并直接回答。有些候选者听不懂面试官的问题，还有些面试者总是不直接回答问题，或者也许是不会的原因，就开始转弯抹角甚至转移话题，我认为这是很不好的，人要用于承担，即使这个问题不会，那也可以大声地说出来”不好意思，这个我不太会“，甚至还可以虚心地请教下面试官，面试不仅仅是一次找工作的过程，也是一次自我学习和提高的过程。大家要知道的是，不是必须全部答对问题才能通过面试，只要大部分问题能回答出来并且候选者的态度良好，那么这样的候选者仍然能通过面试，当然态度不好的候选者，即使技术很好也很大可能通不过面试。 
- 谦虚谨慎、态度友好。有些候选者在面试的时候不谨慎，给人一种随意的感觉，比如坐姿不端正，翘着二郎腿等等，换句话说就是别太随意，作为面试官公司都要求不能太随意，何况候选者呢！太随意的举动会给对方一种不被尊重的感觉。关于谦虚，这个就不必多说了，任何时候都要谦虚，面试过程中骄傲自大（俗称”得瑟“），是很容易被毙的。态度友好，就是要让面试官感受到你的诚意，这样大家沟通起来才比较舒服和自在。

下面对学历和工作经验做一些说明，学历并不是一个硬性要求，即使候选者学校不怎么好也是有可能通过面试的，这就要求候选者技术非常扎实。而工作经验，之所以是2年以上，这是因为社会招聘的对象一般都是有一定工作经验的，而1年工作经验略短了点，拿百度来说，社招的最低级别一般为T4，差不多刚好就是2年经验左右。

这里做下总结，理想的候选者应该是这样的： 
1. 扎实的技术功底，有技术追求（必须） 
2. 态度、沟通和为人都很好（必须） 
3. 2年左右工作经验（基本必须） 
4. 名校、名企、高学历（非必须，加分项） 
基本来说，满足1和2就能通过面试，3和4都是次要条件，但是一般来说不满足3就很难满足1，不要说特例，木有参考意义。 
由此可见，技术是面试结果的决定因素。那么到底技术掌握到什么程度才能比较轻松地通过面试呢？说了那么多，好像和Android没有一点关系，下面就开始以Android为例来分析下面试过程所需的技术。

Android面试过程所需要掌握的技术

一场面试都有一个流程，拿Android面试来说，面试内容不可能全是Android问题，里面应该会有编程基础相关的问题。我对Android面试中的问题做了下分类，如下所示：

类别			描述
数据结构和算法	熟悉或者知道
Java			熟练掌握
Android			熟练掌握
设计模式和架构	熟悉
一般来说，一个Android应用开发岗位是不需要太强的数据结构和算法的，但是这并不意味着候选者可以完全不懂数据结构和算法，所以数据结构和算法大家还是要稍微了解下，由于它不是必须的，所以就算面试过程中回答的不好也没关系，只要后面的Java、Android相关的问题能够完美回答就好。有同学和我反馈，说面试挂在了数据结构和算法，这在社招中应该是不多见的，这多半是因为Android的问题也没有很好地回答出来，这就是社招和校招的不同之处，校招看基础，社招看技术深度和业务。

关于设计模式和架构，其实中高级面试对这个的要求并不是特别高，熟悉下常见的设计模式基本就ok，比如单例模式、工程模式、观察者模式等。

接下来主要描述下面试过程中对Android技术的要求。在我对Android的理解这篇文章中，我对Android的技术类别做了一下划分，如下所示：

类别				描述		开发者所需级别
基本知识点			熟练掌握	初中级
深入知识点			熟练掌握	中高级
基本知识点的细节	掌握		高级
系统核心机制		熟悉、掌握	高级、资深
琐碎的知识点		了解		所有级别
对于大部分面试者来说，大家的目标岗位应该是中高级，中级岗位（百度T4）需要掌握的知识点是：基本知识点、深入知识点；高级岗位（百度T5）需要掌握的知识点是：基本知识点、深入知识点、基本知识点的细节和系统核心机制。 
1. 基本知识点 
比如四大组件如何使用、如何创建Service、如何进行布局等。这类知识是需要熟练掌握的，并且也没什么难度。 
2. 稍微深入的知识点 
比如AIDL、Binder、多进程、View的绘制流程、事件分发、消息队列等。这类知识对于高级开发者来说也是必须掌握的，然而相信很多候选者在面试之前并不能对这些问题了如指掌。这些问题基本都是面试过程中很常见的问题，也是高级岗位所必须掌握的问题，不搞定这些问题无法达到百度的高级工程师的标准，因此也不可能通过面试。 
3. 基本知识点的细节 
比如Activity的启动模式和标记位、Service同时处于start和bind状态时的停止问题、AsyncTask的同步异步问题以及使用时的限制等，这种问题还有很多。这类知识点，大家在开发过程中可以并不会去注意，这会导致一个问题，那就是开发应用没问题，但是在面试时面试官只要稍微问下细节或者特殊情况，就hold不住了。 这类问题也是高级开发者所需要掌握的，有些面试官喜欢问一些看似刁钻的问题，但是候选者如果回答不了也是不好的。 
4. 系统核心机制 
比如主线程的消息循环、主线程如何和AMS如何跨进程交互、SystemServer进程中的各种Service的工作方式、AsyncTask的工作原理等。这类知识对于高级开发者也是建议掌握的，因为它们可以让开发者理解Android的运行体系。 这类问题并不是所有的Android面试都会涉及到，但是技术含量高的大公司有可能涉及此类问题。 
5. 琐碎的知识点 
此类知识点我把它们定义为一些重要但是没有什么技术难度的问题，比如如何打开一个网页、如何打电话、如何发短信、如何定位、多点触控等，这类问题往往不好记忆，但是需要的时候去查一下就能立马搞定。这类问题基本上不会出现在面试过程中。

大家结合自己对Android的学习过程以及面试经验，在面试中遇到的问题是不是都是包含在上面的5个分类之中呢？对于1和5相信所有人都没有问题，但是对比2、3、4中的内容，大家是不是都能很好地Cover呢？换句话说，如果2、3、4中的内容大家都能很好地掌握，面试中的问题还能难倒我们吗？在前面的分析中提到，技术是觉得面试是否成功的关键因素，那么在面试前要做的就是把技术搞好，同时注意沟通和态度，这样的话通过面试岂不是很简单的事？
		
		  